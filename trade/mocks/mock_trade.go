// Code generated by MockGen. DO NOT EDIT.
// Source: trade/trade.go
//
// Generated by this command:
//
//	mockgen -source=trade/trade.go -destination=trade/mocks/mock_trade.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	trade "github.com/gurodrigues-dev/b3-reader/trade"
	gomock "go.uber.org/mock/gomock"
)

// MockWriter is a mock of Writer interface.
type MockWriter struct {
	ctrl     *gomock.Controller
	recorder *MockWriterMockRecorder
	isgomock struct{}
}

// MockWriterMockRecorder is the mock recorder for MockWriter.
type MockWriterMockRecorder struct {
	mock *MockWriter
}

// NewMockWriter creates a new mock instance.
func NewMockWriter(ctrl *gomock.Controller) *MockWriter {
	mock := &MockWriter{ctrl: ctrl}
	mock.recorder = &MockWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWriter) EXPECT() *MockWriterMockRecorder {
	return m.recorder
}

// SaveBatch mocks base method.
func (m *MockWriter) SaveBatch(ctx context.Context, trades []trade.Trade) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveBatch", ctx, trades)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveBatch indicates an expected call of SaveBatch.
func (mr *MockWriterMockRecorder) SaveBatch(ctx, trades any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBatch", reflect.TypeOf((*MockWriter)(nil).SaveBatch), ctx, trades)
}

// MockReader is a mock of Reader interface.
type MockReader struct {
	ctrl     *gomock.Controller
	recorder *MockReaderMockRecorder
	isgomock struct{}
}

// MockReaderMockRecorder is the mock recorder for MockReader.
type MockReaderMockRecorder struct {
	mock *MockReader
}

// NewMockReader creates a new mock instance.
func NewMockReader(ctrl *gomock.Controller) *MockReader {
	mock := &MockReader{ctrl: ctrl}
	mock.recorder = &MockReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReader) EXPECT() *MockReaderMockRecorder {
	return m.recorder
}

// GetAggregatedData mocks base method.
func (m *MockReader) GetAggregatedData(ctx context.Context, ticker string, startDate time.Time) (float64, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAggregatedData", ctx, ticker, startDate)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAggregatedData indicates an expected call of GetAggregatedData.
func (mr *MockReaderMockRecorder) GetAggregatedData(ctx, ticker, startDate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAggregatedData", reflect.TypeOf((*MockReader)(nil).GetAggregatedData), ctx, ticker, startDate)
}

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetAggregatedData mocks base method.
func (m *MockRepository) GetAggregatedData(ctx context.Context, ticker string, startDate time.Time) (float64, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAggregatedData", ctx, ticker, startDate)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAggregatedData indicates an expected call of GetAggregatedData.
func (mr *MockRepositoryMockRecorder) GetAggregatedData(ctx, ticker, startDate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAggregatedData", reflect.TypeOf((*MockRepository)(nil).GetAggregatedData), ctx, ticker, startDate)
}

// SaveBatch mocks base method.
func (m *MockRepository) SaveBatch(ctx context.Context, trades []trade.Trade) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveBatch", ctx, trades)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveBatch indicates an expected call of SaveBatch.
func (mr *MockRepositoryMockRecorder) SaveBatch(ctx, trades any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBatch", reflect.TypeOf((*MockRepository)(nil).SaveBatch), ctx, trades)
}

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
	isgomock struct{}
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// GetAggregatedData mocks base method.
func (m *MockUsecase) GetAggregatedData(ctx context.Context, ticker string, startDate *time.Time) (*trade.AggregatedData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAggregatedData", ctx, ticker, startDate)
	ret0, _ := ret[0].(*trade.AggregatedData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAggregatedData indicates an expected call of GetAggregatedData.
func (mr *MockUsecaseMockRecorder) GetAggregatedData(ctx, ticker, startDate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAggregatedData", reflect.TypeOf((*MockUsecase)(nil).GetAggregatedData), ctx, ticker, startDate)
}

// IngestFiles mocks base method.
func (m *MockUsecase) IngestFiles(ctx context.Context, filePath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IngestFiles", ctx, filePath)
	ret0, _ := ret[0].(error)
	return ret0
}

// IngestFiles indicates an expected call of IngestFiles.
func (mr *MockUsecaseMockRecorder) IngestFiles(ctx, filePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IngestFiles", reflect.TypeOf((*MockUsecase)(nil).IngestFiles), ctx, filePath)
}
